####################################################################################################
# CMakeLists file for NN
# Generated by Gianluca Elia
# 2023-05-31
####################################################################################################

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.12)
set(project_name "nn.ar")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 17)

include(CMakePrintHelpers)

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH
    "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

find_package(Torch REQUIRED) # find torch
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}")
####################################################################################################
# Begin target NNUGens

set(NNUGens_cpp_files
    plugins/NNModel/cpp/NNUGens.cpp
    plugins/NNModel/cpp/backend.cpp
    plugins/NNModel/cpp/parsing_utils.cpp
)
set(NNUGens_sc_files
    plugins/NNModel/sc/NN.sc
    plugins/NNModel/sc/NN_nrt.sc
    plugins/NNModel/sc/NNModel.sc
    plugins/NNModel/sc/NNUGens.sc
)
set(NNUGens_schelp_files
    plugins/NNModel/schelp/NNModel.schelp
    plugins/NNModel/schelp/NNModelMethod.schelp
    plugins/NNModel/schelp/NN.schelp
    plugins/NNModel/schelp/NNGet.schelp
    plugins/NNModel/schelp/NNSet.schelp
)

sc_add_server_plugin(
    "nn.ar/" # desination directory
    "NNUGens" # target name
    "${NNUGens_cpp_files}"
    "${NNUGens_sc_files}"
    "${NNUGens_schelp_files}"
)


if(SCSYNTH)
  target_link_libraries(NNUGens_scsynth "${TORCH_LIBRARIES}")
endif()
if(SUPERNOVA)
  target_link_libraries(NNUGens_supernova "${TORCH_LIBRARIES}")
endif()

# The following code block is suggested to be used on Windows.
# According to https://github.com/pytorch/pytorch/issues/25457,
# the DLLs need to be copied to avoid memory errors.
if (MSVC)
  file(GLOB TORCH_DLLS "${TORCH_INSTALL_PREFIX}/lib/*.dll")
  if(SCSYNTH)
  add_custom_command(TARGET NNUGens_scsynth
                     POST_BUILD
                     COMMAND ${CMAKE_COMMAND} -E copy_if_different
                     ${TORCH_DLLS}
                     $<TARGET_FILE_DIR:NNUGens_scsynth>)
  endif()
  if(SUPERNOVA)
  add_custom_command(TARGET NNUGens_supernova
                     POST_BUILD
                     COMMAND ${CMAKE_COMMAND} -E copy_if_different
                     ${TORCH_DLLS}
                     $<TARGET_FILE_DIR:NNUGens_supernova>)
  endif()
endif (MSVC)
# End target NNModel
####################################################################################################

####################################################################################################
# END PLUGIN TARGET DEFINITION
####################################################################################################

message(STATUS "Generating plugin targets done")
