class:: NNModelMethod
summary:: Collects informations about a torchscript model's method
related:: Classes/NNModel, Classes/NN
categories:: UGens>Machine Learning

description::
Used by link::Classes/NNModel:: to store and present informations about a
model's method. It shouldn't be necessary for the user to create any of these.

instancemethods::

method::ar
Returns a link::Classes/NNUGen:: for this model method.
argument::inputs
The array of inputs to the process. It must be the correct size
(link::#-numInputs::), otherwise an Error is thrown. If the model
requires only one input, it can be provided outside an array.
argument::bufferSize
the number of samples processed at once by the model. Larger values can make for
smoother results, at the cost of more latency. If set to -1 (default) or 0, the minimum
value allowed by the model is chosen. Setting to 0 also disables the external computation thread.
Otherwise, if set to a value less than the model's minBufferSize, it will be set to
minBufferSize automatically by the server.

argument::warmup
Number of warm-up passes: perform on empty inputs and discard their outputs,
right after load and before starting to process actual inputs, because
model optimizations happening in these first executions can cause stuttering (see
link::Classes/NN#First-execution warmup::). Pass 0 (default) to disable warmup.

argument::debug
An integer to select what level of debugging info to print:
table::
## 0 || nothing
## 1 || attribute values when they are set
## 2 || all
::

argument::attributes
An array of pairs (attributeName, attributeValue). Attributes will be set
everytime their attributeValue changes.

returns:: an Array of link::Classes/OutputProxy:: of size link::#-numOutputs::.

method::name
human-readable name
method::idx
numeric index used to identify this method on the server
method::numInputs
number of inputs
method::numOutputs
number of outputs

examples::

code::
NN(\mymodel, \forward).ar(SoundIn.ar());
// same as: 
NN(\mymodel, \forward).ar([SoundIn.ar()]);
// -> an OutputProxy

NN(\mymodel, \forward).ar([WhiteNoise.ar, WhiteNoise.ar]);
// ERROR: NNModel: method forward has 1 inputs, but was given 2

NN(\mymodel, \decode).ar({LFNoise1.ar(0.1)}!8);
// -> an OutputProxy
NN(\mymodel, \encode).ar(Silent.ar);
// -> [ an OutputProxy, an OutputProxy, an OutputProxy, an OutputProxy, an OutputProxy, an OutputProxy, an OutputProxy, an OutputProxy ]
::
